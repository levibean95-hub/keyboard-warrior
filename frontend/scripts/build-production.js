#!/usr/bin/env node\n\nconst { execSync } = require('child_process');\nconst fs = require('fs');\nconst path = require('path');\nconst { gzipSync, brotliCompressSync } = require('zlib');\n\nconst colors = {\n  green: '\\x1b[32m',\n  yellow: '\\x1b[33m',\n  red: '\\x1b[31m',\n  blue: '\\x1b[34m',\n  cyan: '\\x1b[36m',\n  reset: '\\x1b[0m',\n  bold: '\\x1b[1m'\n};\n\nconst log = (message, color = 'reset') => {\n  console.log(`${colors[color]}${message}${colors.reset}`);\n};\n\nconst logStep = (step, message) => {\n  console.log(`${colors.bold}${colors.blue}[${step}]${colors.reset} ${message}`);\n};\n\nconst logSuccess = (message) => {\n  console.log(`${colors.bold}${colors.green}✓${colors.reset} ${message}`);\n};\n\nconst logWarning = (message) => {\n  console.log(`${colors.bold}${colors.yellow}⚠${colors.reset} ${message}`);\n};\n\nconst logError = (message) => {\n  console.log(`${colors.bold}${colors.red}✗${colors.reset} ${message}`);\n};\n\nconst formatFileSize = (bytes) => {\n  const sizes = ['B', 'KB', 'MB', 'GB'];\n  if (bytes === 0) return '0 B';\n  const i = Math.floor(Math.log(bytes) / Math.log(1024));\n  return `${Math.round(bytes / Math.pow(1024, i) * 100) / 100} ${sizes[i]}`;\n};\n\nconst getDirectorySize = (dirPath) => {\n  let totalSize = 0;\n  \n  const files = fs.readdirSync(dirPath, { withFileTypes: true });\n  \n  for (const file of files) {\n    const fullPath = path.join(dirPath, file.name);\n    \n    if (file.isDirectory()) {\n      totalSize += getDirectorySize(fullPath);\n    } else {\n      totalSize += fs.statSync(fullPath).size;\n    }\n  }\n  \n  return totalSize;\n};\n\nconst analyzeBundle = (distPath) => {\n  const jsDir = path.join(distPath, 'js');\n  const cssDir = path.join(distPath, 'css');\n  const assetsDir = path.join(distPath, 'assets');\n  \n  const analysis = {\n    totalSize: 0,\n    gzipSize: 0,\n    brotliSize: 0,\n    files: []\n  };\n  \n  const analyzeFile = (filePath, type) => {\n    if (!fs.existsSync(filePath)) return;\n    \n    const stats = fs.statSync(filePath);\n    const content = fs.readFileSync(filePath);\n    const gzipSize = gzipSync(content).length;\n    const brotliSize = brotliCompressSync(content).length;\n    \n    const fileInfo = {\n      name: path.basename(filePath),\n      type,\n      size: stats.size,\n      gzipSize,\n      brotliSize,\n      compression: {\n        gzip: Math.round((1 - gzipSize / stats.size) * 100),\n        brotli: Math.round((1 - brotliSize / stats.size) * 100)\n      }\n    };\n    \n    analysis.files.push(fileInfo);\n    analysis.totalSize += stats.size;\n    analysis.gzipSize += gzipSize;\n    analysis.brotliSize += brotliSize;\n  };\n  \n  // Analyze JS files\n  if (fs.existsSync(jsDir)) {\n    fs.readdirSync(jsDir)\n      .filter(file => file.endsWith('.js'))\n      .forEach(file => analyzeFile(path.join(jsDir, file), 'JavaScript'));\n  }\n  \n  // Analyze CSS files\n  if (fs.existsSync(cssDir)) {\n    fs.readdirSync(cssDir)\n      .filter(file => file.endsWith('.css'))\n      .forEach(file => analyzeFile(path.join(cssDir, file), 'CSS'));\n  }\n  \n  return analysis;\n};\n\nconst main = async () => {\n  console.log(`${colors.bold}${colors.cyan}🚀 Production Build Script${colors.reset}\\n`);\n  \n  try {\n    // Step 1: Clean previous build\n    logStep('1/8', 'Cleaning previous build...');\n    try {\n      execSync('npm run clean', { stdio: 'inherit' });\n      logSuccess('Previous build cleaned');\n    } catch (error) {\n      logWarning('No previous build to clean');\n    }\n    \n    // Step 2: Type checking\n    logStep('2/8', 'Running TypeScript type checking...');\n    try {\n      execSync('npm run type-check', { stdio: 'pipe' });\n      logSuccess('TypeScript types are valid');\n    } catch (error) {\n      logError('TypeScript type checking failed');\n      console.log(error.stdout?.toString());\n      process.exit(1);\n    }\n    \n    // Step 3: Linting\n    logStep('3/8', 'Running ESLint...');\n    try {\n      execSync('npm run lint', { stdio: 'pipe' });\n      logSuccess('Code linting passed');\n    } catch (error) {\n      logWarning('Linting issues found, but continuing build...');\n      // Don't exit on linting errors in production build\n    }\n    \n    // Step 4: Build production bundle\n    logStep('4/8', 'Building production bundle...');\n    const buildStart = Date.now();\n    \n    try {\n      execSync('NODE_ENV=production npm run build', { \n        stdio: 'inherit',\n        env: { ...process.env, NODE_ENV: 'production' }\n      });\n      const buildTime = Date.now() - buildStart;\n      logSuccess(`Production build completed in ${buildTime}ms`);\n    } catch (error) {\n      logError('Production build failed');\n      process.exit(1);\n    }\n    \n    // Step 5: Analyze bundle\n    logStep('5/8', 'Analyzing bundle...');\n    const distPath = path.join(process.cwd(), 'dist');\n    \n    if (fs.existsSync(distPath)) {\n      const totalDistSize = getDirectorySize(distPath);\n      const bundleAnalysis = analyzeBundle(distPath);\n      \n      console.log(`\\n${colors.bold}📊 Bundle Analysis:${colors.reset}`);\n      console.log(`Total dist size: ${formatFileSize(totalDistSize)}`);\n      console.log(`Bundle size: ${formatFileSize(bundleAnalysis.totalSize)}`);\n      console.log(`Gzipped: ${formatFileSize(bundleAnalysis.gzipSize)} (${Math.round((1 - bundleAnalysis.gzipSize / bundleAnalysis.totalSize) * 100)}% smaller)`);\n      console.log(`Brotli: ${formatFileSize(bundleAnalysis.brotliSize)} (${Math.round((1 - bundleAnalysis.brotliSize / bundleAnalysis.totalSize) * 100)}% smaller)`);\n      \n      console.log(`\\n${colors.bold}📁 File Breakdown:${colors.reset}`);\n      bundleAnalysis.files\n        .sort((a, b) => b.size - a.size)\n        .slice(0, 10) // Show top 10 largest files\n        .forEach(file => {\n          console.log(`  ${file.type.padEnd(12)} ${file.name.padEnd(30)} ${formatFileSize(file.size).padStart(8)} → ${formatFileSize(file.gzipSize).padStart(8)} (gzip)`);\n        });\n      \n      // Check bundle size limits\n      const JSFiles = bundleAnalysis.files.filter(f => f.type === 'JavaScript');\n      const CSSFiles = bundleAnalysis.files.filter(f => f.type === 'CSS');\n      \n      const totalJSSize = JSFiles.reduce((sum, f) => sum + f.gzipSize, 0);\n      const totalCSSSize = CSSFiles.reduce((sum, f) => sum + f.gzipSize, 0);\n      \n      const JS_LIMIT = 250 * 1024; // 250KB\n      const CSS_LIMIT = 50 * 1024;  // 50KB\n      \n      if (totalJSSize > JS_LIMIT) {\n        logWarning(`JavaScript bundle size (${formatFileSize(totalJSSize)}) exceeds recommended limit (${formatFileSize(JS_LIMIT)})`);\n      } else {\n        logSuccess(`JavaScript bundle size is within limits (${formatFileSize(totalJSSize)})`);\n      }\n      \n      if (totalCSSSize > CSS_LIMIT) {\n        logWarning(`CSS bundle size (${formatFileSize(totalCSSSize)}) exceeds recommended limit (${formatFileSize(CSS_LIMIT)})`);\n      } else {\n        logSuccess(`CSS bundle size is within limits (${formatFileSize(totalCSSSize)})`);\n      }\n    }\n    \n    // Step 6: Generate build report\n    logStep('6/8', 'Generating build report...');\n    const buildReport = {\n      timestamp: new Date().toISOString(),\n      version: process.env.npm_package_version || '1.0.0',\n      nodeVersion: process.version,\n      buildTime: Date.now() - buildStart,\n      bundleAnalysis\n    };\n    \n    fs.writeFileSync(\n      path.join(distPath, 'build-report.json'),\n      JSON.stringify(buildReport, null, 2)\n    );\n    logSuccess('Build report generated');\n    \n    // Step 7: Validate build\n    logStep('7/8', 'Validating build output...');\n    const requiredFiles = ['index.html', 'js', 'css', 'assets'];\n    const missingFiles = requiredFiles.filter(file => \n      !fs.existsSync(path.join(distPath, file))\n    );\n    \n    if (missingFiles.length > 0) {\n      logError(`Missing required build files: ${missingFiles.join(', ')}`);\n      process.exit(1);\n    } else {\n      logSuccess('Build validation passed');\n    }\n    \n    // Step 8: Final summary\n    logStep('8/8', 'Build summary');\n    console.log(`\\n${colors.bold}${colors.green}🎉 Production build completed successfully!${colors.reset}\\n`);\n    \n    console.log(`${colors.bold}Next steps:${colors.reset}`);\n    console.log(`  • Test the build: ${colors.cyan}npm run preview${colors.reset}`);\n    console.log(`  • Deploy the ${colors.yellow}dist${colors.reset} folder to your hosting provider`);\n    console.log(`  • Monitor performance in production`);\n    \n  } catch (error) {\n    logError(`Build failed: ${error.message}`);\n    process.exit(1);\n  }\n};\n\nif (require.main === module) {\n  main();\n}\n\nmodule.exports = { main };