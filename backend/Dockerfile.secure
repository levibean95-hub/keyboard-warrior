# Multi-stage build for security and efficiency
FROM node:18-alpine AS builder

# Create app directory with restricted permissions
WORKDIR /usr/src/app

# Add security labels
LABEL security.scan="enabled"
LABEL security.baseline="nodejs-alpine"

# Install build dependencies
RUN apk add --no-cache \
    python3 \
    make \
    g++ \
    && rm -rf /var/cache/apk/*

# Copy package files
COPY package*.json ./
COPY tsconfig.json ./

# Install dependencies including dev dependencies for building
RUN npm ci --only=production --audit=false && npm cache clean --force

# Copy source code
COPY src/ ./src/

# Build the application
RUN npm run build

# Production stage
FROM node:18-alpine AS production

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nextjs -u 1001

# Create app directory
WORKDIR /usr/src/app

# Copy built application from builder stage
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/dist ./dist
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/node_modules ./node_modules
COPY --from=builder --chown=nextjs:nodejs /usr/src/app/package*.json ./

# Create logs directory with proper permissions
RUN mkdir -p logs && chown -R nextjs:nodejs logs

# Install production security updates
RUN apk add --no-cache \
    dumb-init \
    && rm -rf /var/cache/apk/*

# Create SSL directory for certificates (optional)
RUN mkdir -p ssl && chown -R nextjs:nodejs ssl

# Set proper permissions
RUN chmod -R 755 dist && \
    chmod -R 700 logs && \
    chmod -R 700 ssl

# Switch to non-root user
USER nextjs

# Expose port
EXPOSE 5000

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').request('http://localhost:5000/health', (res) => { \
    process.exit(res.statusCode === 200 ? 0 : 1) \
  }).on('error', () => process.exit(1)).end()"

# Use dumb-init to handle signals properly
ENTRYPOINT ["dumb-init", "--"]

# Start the application
CMD ["node", "dist/server.secure.js"]